#!/usr/bin/env python3

import sys
import argparse
import os
from shutil import copyfile, copystat
import requests
from io import StringIO
from signal import signal, SIGPIPE, SIG_DFL

from diffenv import main, diffviewer

# Handle arguments
parser = argparse.ArgumentParser(
    description='Diff your total environment. Run without any params to simply output current environment state as YAML.',
    epilog='More information and source code at https://github.com/error-central/diffenv')
parser.add_argument('-o', '--output', help='output to file instead of stdout')
parser.add_argument(
    '-c',
    '--compare',
    help='file or URL to compare against the current env')
parser.add_argument(
    '--add-hooks',
    action='store_true',
    help='install git hooks in current repo and exit')
parser.add_argument(
    '--share',
    action='store_true',
    help='store current env and return URL that can be shared')
parser.add_argument(
    '--post',
    default='https://transfer.sh',
    help='POST env to specific URL when sharing; must be used with --share')
parser.add_argument('--config', help='load config from specific file')
parser.add_argument('--ignore-config',
                    action='store_true',
                    help='ignore configs and run all facets')

args = parser.parse_args()

# Handle outputting to file or stdout
outfilestream = sys.stdout if args.output is None else open(args.output, 'w')
signal(SIGPIPE, SIG_DFL)

# Determine what config to use
default_config = {'facets': None}
if args.config:
    # User specificed a config file
    config = main.load_config_file(args.config)
elif args.ignore_config:
    # User has elected to ignore config (use all facets)
    config = default_config
else:
    # Find config file in ./diffenv of git repo or user directory
    try:
        git_config = main.load_config_file(
            os.path.join(main.git_toplevel, '.diffenv/config.yaml'))
    except:
        git_config = None
    try:
        user_config = main.load_config_file(
            os.path.expanduser('~/.diffenv/config.yaml'))
    except:
        user_config = None
    config = (git_config or user_config or default_config)
facets = main.get_all_facets()
whitelist = config['facets']


if args.add_hooks:
    # --add-hooks : Install git hooks
    if main.git_toplevel is None:
        sys.stderr.write("ERROR: Not in a git repot, so cannot add git hooks.")
        exit(1)

    hooks_dst = os.path.join(main.git_toplevel, '.git', 'hooks', 'post-commit')
    dirname = os.path.split(os.path.abspath(__file__))[0]
    # Find hooks dir relative to this file
    hooks_src = os.path.join(dirname, '..', 'hooks', 'post-commit')
    # Copy the hook
    copyfile(hooks_src, hooks_dst)
    # Make executable
    copystat(hooks_src, hooks_dst)
    print("virtualenv: Installed git post-commit hook to %s" % hooks_dst)

elif args.compare is not None:
    # --compare : compare with file or url
    local_env = main.collect_env(facets, whitelist)
    compare_env = main.read_file_or_url(args.compare)
    try:
        diffviewer.display_diff(local_env, compare_env, outfilestream)
    except BrokenPipeError as e:
        pass

elif args.share:
    # --share : Get a shareable link
    env = main.collect_env(facets, whitelist)
    buf = StringIO()
    main.yaml.dump(env, buf)
    upload_url = args.post
    r = requests.post(upload_url, files={'diff': buf.getvalue()})
    print('Run the following line on comparison environment:')
    print()
    print('diffenv --compare ' + r.text)
    print()

else:
    # Simply output current env
    env = main.collect_env(facets, whitelist)
    try:
        main.yaml.dump(env, outfilestream)
    except BrokenPipeError as e:
        pass
