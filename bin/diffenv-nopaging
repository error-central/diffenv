#!/usr/bin/env python3

import sys
import argparse
import os
from os.path import join
from shutil import copyfile, copystat
import requests
from io import StringIO
from signal import signal, SIGPIPE, SIG_DFL

from diffenv import main, diffviewer

# Handle arguments

parser = argparse.ArgumentParser(
    description='Diff total development environment.')
parser.add_argument('-o', '--output', help='output to file instead of stdout')
parser.add_argument(
    '-c',
    '--compare',
    help='file or URL to compare against the current env')
parser.add_argument(
    '--add-hooks',
    action='store_true',
    help='install git hooks in current repo and exit')
parser.add_argument(
    '--share',
    action='store_true',
    help='store current env and return URL that can be shared')
parser.add_argument(
    '--post',
    default='https://transfer.sh',
    help='POST env to specific URL')
parser.add_argument('--config', help='load config from specific file')
parser.add_argument('--ignore-config',
                    action='store_true',
                    help='ignore configs and run all facets')

args = parser.parse_args()

# Handle outputting to file or stdout
outfilestream = sys.stdout if args.output is None else open(args.output, 'w')
signal(SIGPIPE,SIG_DFL)


default_config = {'facets': None}
if args.config:
    config = main.get_config(args.config)
elif args.ignore_config:
    config = default_config
else:
    config = main.get_config(main.git_toplevel()) or main.get_config('~/') or default_config
facets = main.get_all_facets()
whitelist = config['facets']


if args.add_hooks:
    # Install git hooks
    hooks_dst = join(main.git_toplevel(), '.git', 'hooks', 'post-commit')
    dirname = os.path.split(os.path.abspath(__file__))[0]
    # Find hooks dir relative to this file
    hooks_src = join(dirname, '..', 'hooks', 'post-commit')
    # Copy the hook
    copyfile(hooks_src, hooks_dst)
    # Make executable
    copystat(hooks_src, hooks_dst)
    print("virtualenv: Installed git post-commit hook to %s" % hooks_dst)
elif args.compare is None:
    env = main.collect_env(facets, whitelist)
    if args.share or args.post is not None:
        buf = StringIO()
        main.yaml.dump(env, buf)
        upload_url = args.post
        r = requests.post(upload_url, files={'diff': buf.getvalue()})
        if args.share:
            print('Run the following line on comparison environment:')
            print()
            print('diffenv --compare ' + r.text)
            print()
        else:
            print('diffenv POSTed to ' + upload_url)
    else:
        # Output our results
        try:
            main.yaml.dump(env, outfilestream)
        except BrokenPipeError as e:
          pass

else:
    if len(args.compare) == 0:
        # TODO compare to current state to most recent commit
        print("Git hook integration not implemented yet")
    else:
        files = [main.read_file_or_url(name) for name in args.compare]
        if len(files) == 1:
            files = [main.collect_env(facets, whitelist)] + files

        try:
            diffviewer.display_diff(files[0],
                                    files[1],
                                    outfilestream)
        except BrokenPipeError as e:
          pass
